{"remainingRequest":"C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\src\\pages\\Crowded.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\src\\pages\\Crowded.vue","mtime":1565112570779},{"path":"C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable */\nimport Vue from 'vue';\nimport VueFusionCharts from 'vue-fusioncharts'\nimport FusionCharts from 'fusioncharts'\nimport Charts from 'fusioncharts/fusioncharts.charts'\n//import the theme\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion'\nimport VueResource from 'vue-resource'\nimport firebase from 'firebase'\nimport Autocomplete from '@trevoreyre/autocomplete-vue'\nimport '@trevoreyre/autocomplete-vue/dist/style.css'\n\n// register VueFusionCharts component\nVue.use(VueFusionCharts, FusionCharts, Charts, FusionTheme)\nVue.use(VueResource)\nVue.use(Autocomplete)\n// Your web app's Firebase configuration\n\n// Initialize Firebase\nvar db\nvar aux = []\nvar dataSource = {\n    \"chart\": {\n        \"caption\": \"People have checked the stop\",\n        \"subCaption\": \"In Ppl = People\",\n        \"xAxisName\": \"Stop\",\n        \"yAxisName\": \"People\",\n        \"numberSuffix\": \"p\",\n        \"yAxisMinValue\": \"0\",\n        \"theme\": \"fusion\"\n    },\n    \"annotations\": {\n    \"groups\": [\n      {\n        \"id\": \"anchor-highlight\",\n        \"items\": [\n          {\n            \"id\": \"high-star\",\n            \"type\": \"spline\",\n            \"x\": \"$dataset.0.set.2.x\",\n            \"y\": \"$dataset.0.set.2.y\",\n            \"radius\": \"12\",\n            \"color\": \"#6baa01\",\n            \"border\": \"2\",\n            \"borderColor\": \"#f8bd19\"\n          }\n        ]\n      }\n    ]\n  },\n    \"data\": null\n}\nexport default {\n  name: 'Graphics',\n  searchs: [],\n  selected: '',\n  dataSource: dataSource,\n  components: {\n    Autocomplete\n  },\n  data(){\n    return {\n      width: '100%',\n      height: '400',\n      type: 'spline',\n      dataFormat: 'json',\n      dataSource: dataSource,\n      id: '',\n      names: [],\n      nameStop: null,\n      spinnerDis: true,\n      chartDis: false,\n      auxComplete: []\n    }\n  },\n  computed: {\n  },\n  methods: {\n    initDB(){\n    var vm = this\n    db = firebase.database()\n    var aux = []\n    var namesAux = []\n    db.ref('data/').on('value', function (snapshot) {\n            var objeto = snapshot.val();\n            var name;\n            var count;\n            for (var i = 0; i <objeto.length; i++) {\n              name = objeto[i].name\n              if(objeto[i].count == null){\n                count = 0\n              } else {\n                count = objeto[i].count\n              }\n              if(i < 20){ //Summary, 20 firsts.\n                aux.push({'label':name, 'value': count})\n              }\n              vm.auxComplete.push({'label':name, 'value': count})\n              namesAux.push({'name':name, 'idStop':i})\n            }\n    })\n    setTimeout(function(){\n      const data = Object.assign({}, vm.dataSource) //clone data\n        data.data = aux\n        vm.dataSource = data\n        vm.names = namesAux\n        vm.chartDis = true\n        vm.spinnerDis = false\n        //this.dataSource.render('chart-container', undefined, callback)\n    }, 2000);\n    },\n    search(input) {\n      if (input.length < 1) { return [] }\n      var vm = this\n      var names = []\n      for(var i = 0; i < vm.names.length; i++)\n        names.push(vm.names[i].name)\n      return names.filter(name => {\n        return name.toLowerCase().\n        startsWith(input.toLowerCase());\n      });\n    },\n    getResultValue(result) {\n      return result\n    },\n    handleSubmit(result) {\n      var numSearchs\n      var vm = this\n      var stops = vm.auxComplete\n      var i=0\n      var ok=false\n      var idStop\n      while(i < stops.length && !ok){\n        if(stops[i].label == result){\n          stops[i].value +=1\n          var countStop = []\n          countStop.push({'label':result, 'value':stops[i].value})\n          vm.type = 'column2d'\n          vm.dataSource.data = countStop\n          ok = true\n          idStop = vm.names[i].idStop\n        }\n        i++\n      }\n        var query= db.ref('data/' + idStop)\n        query.update({count: stops[i-1].value})\n    }\n  },\n  mounted(){\n    this.initDB()\n  }\n}\n",{"version":3,"sources":["Crowded.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Crowded.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <card>\n          <div id=\"app\">\n            <b-form>\n              <div id=\"autocomplete\" class=\"autocomplete\">\n              <b-form-group\n                id=\"input-group-1\"\n                label=\"Check how many people search your stop.\"\n                label-for=\"input-1\"\n              >\n              <autocomplete\n                  :search=\"search\"\n                  placeholder=\"Search for a stop\"\n                  aria-label=\"Search for a stop\"\n                  :get-result-value=\"getResultValue\"\n                  @submit=\"handleSubmit\"\n              ></autocomplete>\n              </b-form-group>\n              </div>\n            </b-form>\n            <div v-show=\"spinnerDis\">\n              <b-spinner label=\"Spinning\"></b-spinner>\n            </div>\n            <div v-show=\"chartDis\">\n              <fusioncharts\n                :type=\"type\"\n                :width=\"width\"\n                :height=\"height\"\n                :dataFormat=\"dataFormat\"\n                :dataSource=\"dataSource\"\n              ></fusioncharts>\n              </div>\n          </div>\n      </card>\n    </div>\n  </div>\n</template>\n\n<script src=\"https://cdn.fusioncharts.com/fusioncharts/latest/fusioncharts.js\"></script>\n<script>\n/* eslint-disable */\nimport Vue from 'vue';\nimport VueFusionCharts from 'vue-fusioncharts'\nimport FusionCharts from 'fusioncharts'\nimport Charts from 'fusioncharts/fusioncharts.charts'\n//import the theme\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion'\nimport VueResource from 'vue-resource'\nimport firebase from 'firebase'\nimport Autocomplete from '@trevoreyre/autocomplete-vue'\nimport '@trevoreyre/autocomplete-vue/dist/style.css'\n\n// register VueFusionCharts component\nVue.use(VueFusionCharts, FusionCharts, Charts, FusionTheme)\nVue.use(VueResource)\nVue.use(Autocomplete)\n// Your web app's Firebase configuration\n\n// Initialize Firebase\nvar db\nvar aux = []\nvar dataSource = {\n    \"chart\": {\n        \"caption\": \"People have checked the stop\",\n        \"subCaption\": \"In Ppl = People\",\n        \"xAxisName\": \"Stop\",\n        \"yAxisName\": \"People\",\n        \"numberSuffix\": \"p\",\n        \"yAxisMinValue\": \"0\",\n        \"theme\": \"fusion\"\n    },\n    \"annotations\": {\n    \"groups\": [\n      {\n        \"id\": \"anchor-highlight\",\n        \"items\": [\n          {\n            \"id\": \"high-star\",\n            \"type\": \"spline\",\n            \"x\": \"$dataset.0.set.2.x\",\n            \"y\": \"$dataset.0.set.2.y\",\n            \"radius\": \"12\",\n            \"color\": \"#6baa01\",\n            \"border\": \"2\",\n            \"borderColor\": \"#f8bd19\"\n          }\n        ]\n      }\n    ]\n  },\n    \"data\": null\n}\nexport default {\n  name: 'Graphics',\n  searchs: [],\n  selected: '',\n  dataSource: dataSource,\n  components: {\n    Autocomplete\n  },\n  data(){\n    return {\n      width: '100%',\n      height: '400',\n      type: 'spline',\n      dataFormat: 'json',\n      dataSource: dataSource,\n      id: '',\n      names: [],\n      nameStop: null,\n      spinnerDis: true,\n      chartDis: false,\n      auxComplete: []\n    }\n  },\n  computed: {\n  },\n  methods: {\n    initDB(){\n    var vm = this\n    db = firebase.database()\n    var aux = []\n    var namesAux = []\n    db.ref('data/').on('value', function (snapshot) {\n            var objeto = snapshot.val();\n            var name;\n            var count;\n            for (var i = 0; i <objeto.length; i++) {\n              name = objeto[i].name\n              if(objeto[i].count == null){\n                count = 0\n              } else {\n                count = objeto[i].count\n              }\n              if(i < 20){ //Summary, 20 firsts.\n                aux.push({'label':name, 'value': count})\n              }\n              vm.auxComplete.push({'label':name, 'value': count})\n              namesAux.push({'name':name, 'idStop':i})\n            }\n    })\n    setTimeout(function(){\n      const data = Object.assign({}, vm.dataSource) //clone data\n        data.data = aux\n        vm.dataSource = data\n        vm.names = namesAux\n        vm.chartDis = true\n        vm.spinnerDis = false\n        //this.dataSource.render('chart-container', undefined, callback)\n    }, 2000);\n    },\n    search(input) {\n      if (input.length < 1) { return [] }\n      var vm = this\n      var names = []\n      for(var i = 0; i < vm.names.length; i++)\n        names.push(vm.names[i].name)\n      return names.filter(name => {\n        return name.toLowerCase().\n        startsWith(input.toLowerCase());\n      });\n    },\n    getResultValue(result) {\n      return result\n    },\n    handleSubmit(result) {\n      var numSearchs\n      var vm = this\n      var stops = vm.auxComplete\n      var i=0\n      var ok=false\n      var idStop\n      while(i < stops.length && !ok){\n        if(stops[i].label == result){\n          stops[i].value +=1\n          var countStop = []\n          countStop.push({'label':result, 'value':stops[i].value})\n          vm.type = 'column2d'\n          vm.dataSource.data = countStop\n          ok = true\n          idStop = vm.names[i].idStop\n        }\n        i++\n      }\n        var query= db.ref('data/' + idStop)\n        query.update({count: stops[i-1].value})\n    }\n  },\n  mounted(){\n    this.initDB()\n  }\n}\n</script>\n"]}]}