{"remainingRequest":"C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\src\\pages\\TableList.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\src\\pages\\TableList.vue","mtime":1564852514157},{"path":"C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { PaperTable } from \"@/components\";\nimport Vue from 'vue'\nimport VueResource from 'vue-resource'\nimport firebase from 'firebase'\nimport Autocomplete from '@trevoreyre/autocomplete-vue'\nimport '@trevoreyre/autocomplete-vue/dist/style.css'\nimport GoogleSpreadsheet from 'google-spreadsheet'\nVue.use(VueResource)\nVue.use(Autocomplete)\nVue.use(GoogleSpreadsheet)\nconst tableColumns = ['Line', 'Destination', 'Estimate Arrive', 'Distance Bus'];\nconst tableData = [\n  {\n    line: \"1\",\n    destination: \"Dakota Rice\",\n    estimate_arrive: \"$36.738\",\n    distance_bus: \"Niger\",\n  },\n  {\n    line: 2,\n    destination: \"Minerva Hooper\",\n    estimate_arrive: \"$23,789\",\n    distance_bus: \"Cura√ßao\",\n  },\n  {\n    line: 3,\n    destination: \"Sage Rodriguez\",\n    estimate_arrive: \"$56,142\",\n    distance_bus: \"Netherlands\",\n  },\n  {\n    line: 4,\n    destination: \"Philip Chaney\",\n    estimate_arrive: \"$38,735\",\n    distance_bus: \"Netherlands\",\n  }\n];\nexport default {\n    name:'Schedule',\n    components: {\n      Autocomplete,\n      PaperTable\n    },\n    data(){\n        return{\n          isBusy: false,\n          fields: ['Line', 'Destination', 'Estimate Arrive', 'Distance Bus'],\n          items: [{ Line: 7, Destination: 'MacDonald', estimate_arrive: 40, distance_bus: 2000},\n          { Line: 7, Destination: 'MacDonald', estimate_arrive: 40, distance_bus: 2000},\n          { Line: 8, Destination: 'MacDonald', estimate_arrive: 40, distance_bus: 2000},\n          { Line: 7, Destination: 'MacDonald', estimate_arrive: 40, distance_bus: 2000}],\n          selectMode: 'multi',\n          selected: [],\n          namesAux: [],\n          show: true,\n          isInit: false,\n          isSignIn: false,\n          info: null,\n          validated: true,\n          table1: {\n            title: \"Schedule\",\n            subTitle: \"Buses that are going to arrive.\",\n            columns: [...tableColumns],\n            data: [...tableData]\n          }    \n        }\n    },\n    computed: {\n      isDisabled() {\n        // evaluate whatever you need to determine disabled here...\n        return this.validated;\n      }\n    },\n    methods:{\n        initDB(){\n          var vm = this\n          var db = firebase.database()\n          db.ref('data/').on('value', function (snapshot) {\n            var objeto = snapshot.val();\n            var name;\n            for (var i = 0; i < objeto.length; i++) {\n              name = objeto[i].name\n              vm.namesAux.push({'name':name, 'idStop':i})\n            }\n          })\n        },\n        getData(idStop){\n          var bodyJSON = \"{'\\n      \\'statistics\\':\\'Y\\',\\n      \\'cultureInfo\\':\\'EN\\',\\n      \\'Text_StopRequired_YN\\':\\'Y\\',\\n      \\'Text_EstimationsRequired_YN\\':\\'Y\\',\\n      \\'Text_IncidencesRequired_YN\\':\\'Y\\',\\n      \\'DateTime_Referenced_Incidencies_YYYYMMDD\\':\\'20190728\\'\\n'}\"\n            this.$http.get('https://openapi.emtmadrid.es/v1/mobilitylabs/user/login', {responseType: 'json', headers: {'email': 'mrsergiogf@gmail.com', 'password': 'Sergio18', 'X-ApiKey': 'a964005d-56ab-42af-be94-fe77c4d7df77', 'X-ClientId': 'fb43dc15-182d-4b2c-be4d-da9ad36a24a7'}}).then(response => {\n                this.$http.post('https://openapi.emtmadrid.es/v1/transport/busemtmad/stops/'+ idStop + '/arrives/all/', {headers: {'accessToken': response.body.data[0].accessToken}, body: {\"mode\": \"raw\", \"raw\": bodyJSON}})\n                .then(response => {\n                    var data = response.body.data[0]\n                }, response => {\n                    console.log('error2')\n                    })\n            }, response => {\n                // error callback\n                    console.log('error')\n                })\n        },\n        rowSelected(items){\n          this.selected = items\n          if(this.selected.length > 0) this.validated = false\n          else this.validated = true\n        },\n        search(input) { \n          if (input.length < 1) { return [] }\n          var vm = this\n          var names = []\n          for(var i = 0; i < vm.namesAux.length; i++)\n            names.push(vm.namesAux[i].name)\n          return names.filter(name => {\n            return name.toLowerCase().\n            startsWith(input.toLowerCase());\n          });\n        },\n        getResultValue(result) {\n          return result\n        },\n        handleSubmit(result) {\n          var vm = this\n          var i = 0\n          var ok = false\n          var idStop\n          while(i < vm.namesAux.length && !ok){\n            if(vm.namesAux[i].name == result){\n              idStop = vm.namesAux[i].idStop\n              ok = true\n            }\n            i++\n          }\n          this.getData(idStop)\n        },\n        handleDownload(){\n          var vm = this\n          var rowsSelected = vm.selected\n          var GoogleSpreadsheet = require('google-spreadsheet')\n          var doc = new GoogleSpreadsheet('1r5hLRn1jwQbJLkW8Q3D2bIR9QK2tk3vBNvSy3xx2xxY')\n          var async = require('async')\n          var sheet = null\n          async.series([\n              function setAuth (step) {\n                var creds = require('./google-generated-creds.json')\n                doc.useServiceAccountAuth(creds, step)\n              },\n              function getInfoAndWorksheets (step) {\n                doc.getInfo(function (err, info) {\n                  sheet = info.worksheets[0]\n                  // removing a worksheet\n                  //sheet.del(); //async\n                  console.log(err)\n                  step()\n                })\n              },\n              function managingSheets(step) {\n                sheet.resize({rowCount: 50, colCount: 4}); //async\n                /*doc.addWorksheet({\n                  title: 'Schedule EMT'\n                }, function(err, shet) {\n            \n                  // change a sheet's title\n                  sheet.setTitle('Schedule EMT'); //async\n            \n                  //resize a sheet\n            \n                  sheet.setHeaderRow(['Line', 'Destination', 'Estimate arrive', 'Distance Bus']); //async */        \n                  step();\n                //});\n              },\n              function workingWithCells (step) {\n                sheet.getRows({\n                  offset: 1,\n                  limit: 50,\n                  //orderby: 'col2'\n                }, function (err, rows) {\n                  sheet.getCells({\n                    'min-row': 2, // starts in the second row\n                    'max-row': 50,\n                    'return-empty': true\n                  }, function (err, cells) {\n                    for(var a = 0; a < 50; a++) \n                      cells[a].value = \"\"\n                    sheet.bulkUpdateCells(cells) // async\n                    var i = 0\n                    var ok = false\n                    for(var j = 0; j < rowsSelected.length; j++){\n                      cells[i].value = rowsSelected[j].Line\n                      cells[i + 1].value = rowsSelected[j].Destination\n                      var minEstimateArrive = Math.round(rowsSelected[j].estimate_arrive / 60)\n                      if(minEstimateArrive == 0) minEstimateArrive = '< 1 min'\n                      else minEstimateArrive = minEstimateArrive +  ' min'\n                      cells[i + 2].value = minEstimateArrive\n                      cells[i + 3].value = (rowsSelected[j].distance_bus + ' m')\n                      i += 4 // NumColumns\n                    }\n                    sheet.bulkUpdateCells(cells) // async\n                    window.open(\"https://docs.google.com/spreadsheets/d/1r5hLRn1jwQbJLkW8Q3D2bIR9QK2tk3vBNvSy3xx2xxY/edit#gid=509695719\", \"_blank\")\n                    console.log(err)\n                  })\n                  console.log(err)\n                  step()\n                })\n              }\n            ], function (err) {\n              if (err) {\n                console.log('Error: ' + err)\n              }\n            })\n        },\n        handleClickSignIn () {\n          this.$gAuth.signIn()\n            .then(user => {\n              // On success do something, refer to https://developers.google.com/api-client-library/javascript/reference/referencedocs#googleusergetid\n              console.log('user', this.googleusergetid)\n              this.isSignIn = this.$gAuth.isAuthorized\n            })\n            .catch(error => {\n              console.log(error)\n              // On fail do something\n            })\n        },\n        handleClickSignOut () {\n          this.$gAuth.signOut()\n            .then(() => {\n              // On success do something\n              this.isSignIn = this.$gAuth.isAuthorized\n            })\n            .catch(error => {\n              console.log(error)\n              // On fail do something\n            })\n        }\n    },\n    mounted(){\n      this.initDB()\n      let that = this\n      let checkGauthLoad = setInterval(function () {\n      that.isInit = that.$gAuth.isInit\n      that.isSignIn = that.$gAuth.isAuthorized\n      if (that.isInit) clearInterval(checkGauthLoad)\n    }, 1000)\n    }\n}\n",{"version":3,"sources":["TableList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"TableList.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <card :title=\"table1.title\" :subTitle=\"table1.subTitle\">\n                    <b-form>\n            <div id=\"autocomplete\" class=\"autocomplete\">\n            <b-form-group\n              id=\"input-group-1\"\n              label-for=\"input-1\"\n            >\n            <autocomplete\n                :search=\"search\"\n                placeholder=\"Search the stop\"\n                aria-label=\"Search the stop\"\n                :get-result-value=\"getResultValue\"\n                @submit=\"handleSubmit\"\n            ></autocomplete>\n            </b-form-group>\n            </div>\n          </b-form>\n          <b-table\n              selectable\n              :select-mode=\"selectMode\"\n              selectedVariant=\"success\"\n              :fields=\"fields\"\n              @row-selected=\"rowSelected\"\n              responsive=\"sm\"\n              :items=\"items\"\n              :busy=\"isBusy\"\n              class=\"mt-3\"\n              striped\n              bordered\n              outlined>\n              <template slot=\"selected\" slot-scope=\"{ rowSelected }\">\n                <span v-if=\"rowSelected\">‚úî</span>\n              </template>\n                <div slot=\"table-busy\" class=\"text-center text-danger my-2\">\n                  <b-spinner class=\"align-middle\"></b-spinner>\n                  <strong>Loading...</strong>\n                </div>\n            </b-table>\n            <div class=\"text-center\">\n              <b-button squared variant=\"success\" @click=\"handleDownload()\" :disabled=isDisabled>Download</b-button>\n            </div>\n          \n        </card>\n      </div>\n    </div>\n</template>\n<script>\nimport { PaperTable } from \"@/components\";\nimport Vue from 'vue'\nimport VueResource from 'vue-resource'\nimport firebase from 'firebase'\nimport Autocomplete from '@trevoreyre/autocomplete-vue'\nimport '@trevoreyre/autocomplete-vue/dist/style.css'\nimport GoogleSpreadsheet from 'google-spreadsheet'\nVue.use(VueResource)\nVue.use(Autocomplete)\nVue.use(GoogleSpreadsheet)\nconst tableColumns = ['Line', 'Destination', 'Estimate Arrive', 'Distance Bus'];\nconst tableData = [\n  {\n    line: \"1\",\n    destination: \"Dakota Rice\",\n    estimate_arrive: \"$36.738\",\n    distance_bus: \"Niger\",\n  },\n  {\n    line: 2,\n    destination: \"Minerva Hooper\",\n    estimate_arrive: \"$23,789\",\n    distance_bus: \"Cura√ßao\",\n  },\n  {\n    line: 3,\n    destination: \"Sage Rodriguez\",\n    estimate_arrive: \"$56,142\",\n    distance_bus: \"Netherlands\",\n  },\n  {\n    line: 4,\n    destination: \"Philip Chaney\",\n    estimate_arrive: \"$38,735\",\n    distance_bus: \"Netherlands\",\n  }\n];\nexport default {\n    name:'Schedule',\n    components: {\n      Autocomplete,\n      PaperTable\n    },\n    data(){\n        return{\n          isBusy: false,\n          fields: ['Line', 'Destination', 'Estimate Arrive', 'Distance Bus'],\n          items: [{ Line: 7, Destination: 'MacDonald', estimate_arrive: 40, distance_bus: 2000},\n          { Line: 7, Destination: 'MacDonald', estimate_arrive: 40, distance_bus: 2000},\n          { Line: 8, Destination: 'MacDonald', estimate_arrive: 40, distance_bus: 2000},\n          { Line: 7, Destination: 'MacDonald', estimate_arrive: 40, distance_bus: 2000}],\n          selectMode: 'multi',\n          selected: [],\n          namesAux: [],\n          show: true,\n          isInit: false,\n          isSignIn: false,\n          info: null,\n          validated: true,\n          table1: {\n            title: \"Schedule\",\n            subTitle: \"Buses that are going to arrive.\",\n            columns: [...tableColumns],\n            data: [...tableData]\n          }    \n        }\n    },\n    computed: {\n      isDisabled() {\n        // evaluate whatever you need to determine disabled here...\n        return this.validated;\n      }\n    },\n    methods:{\n        initDB(){\n          var vm = this\n          var db = firebase.database()\n          db.ref('data/').on('value', function (snapshot) {\n            var objeto = snapshot.val();\n            var name;\n            for (var i = 0; i < objeto.length; i++) {\n              name = objeto[i].name\n              vm.namesAux.push({'name':name, 'idStop':i})\n            }\n          })\n        },\n        getData(idStop){\n          var bodyJSON = \"{'\\n      \\'statistics\\':\\'Y\\',\\n      \\'cultureInfo\\':\\'EN\\',\\n      \\'Text_StopRequired_YN\\':\\'Y\\',\\n      \\'Text_EstimationsRequired_YN\\':\\'Y\\',\\n      \\'Text_IncidencesRequired_YN\\':\\'Y\\',\\n      \\'DateTime_Referenced_Incidencies_YYYYMMDD\\':\\'20190728\\'\\n'}\"\n            this.$http.get('https://openapi.emtmadrid.es/v1/mobilitylabs/user/login', {responseType: 'json', headers: {'email': 'mrsergiogf@gmail.com', 'password': 'Sergio18', 'X-ApiKey': 'a964005d-56ab-42af-be94-fe77c4d7df77', 'X-ClientId': 'fb43dc15-182d-4b2c-be4d-da9ad36a24a7'}}).then(response => {\n                this.$http.post('https://openapi.emtmadrid.es/v1/transport/busemtmad/stops/'+ idStop + '/arrives/all/', {headers: {'accessToken': response.body.data[0].accessToken}, body: {\"mode\": \"raw\", \"raw\": bodyJSON}})\n                .then(response => {\n                    var data = response.body.data[0]\n                }, response => {\n                    console.log('error2')\n                    })\n            }, response => {\n                // error callback\n                    console.log('error')\n                })\n        },\n        rowSelected(items){\n          this.selected = items\n          if(this.selected.length > 0) this.validated = false\n          else this.validated = true\n        },\n        search(input) { \n          if (input.length < 1) { return [] }\n          var vm = this\n          var names = []\n          for(var i = 0; i < vm.namesAux.length; i++)\n            names.push(vm.namesAux[i].name)\n          return names.filter(name => {\n            return name.toLowerCase().\n            startsWith(input.toLowerCase());\n          });\n        },\n        getResultValue(result) {\n          return result\n        },\n        handleSubmit(result) {\n          var vm = this\n          var i = 0\n          var ok = false\n          var idStop\n          while(i < vm.namesAux.length && !ok){\n            if(vm.namesAux[i].name == result){\n              idStop = vm.namesAux[i].idStop\n              ok = true\n            }\n            i++\n          }\n          this.getData(idStop)\n        },\n        handleDownload(){\n          var vm = this\n          var rowsSelected = vm.selected\n          var GoogleSpreadsheet = require('google-spreadsheet')\n          var doc = new GoogleSpreadsheet('1r5hLRn1jwQbJLkW8Q3D2bIR9QK2tk3vBNvSy3xx2xxY')\n          var async = require('async')\n          var sheet = null\n          async.series([\n              function setAuth (step) {\n                var creds = require('./google-generated-creds.json')\n                doc.useServiceAccountAuth(creds, step)\n              },\n              function getInfoAndWorksheets (step) {\n                doc.getInfo(function (err, info) {\n                  sheet = info.worksheets[0]\n                  // removing a worksheet\n                  //sheet.del(); //async\n                  console.log(err)\n                  step()\n                })\n              },\n              function managingSheets(step) {\n                sheet.resize({rowCount: 50, colCount: 4}); //async\n                /*doc.addWorksheet({\n                  title: 'Schedule EMT'\n                }, function(err, shet) {\n            \n                  // change a sheet's title\n                  sheet.setTitle('Schedule EMT'); //async\n            \n                  //resize a sheet\n            \n                  sheet.setHeaderRow(['Line', 'Destination', 'Estimate arrive', 'Distance Bus']); //async */        \n                  step();\n                //});\n              },\n              function workingWithCells (step) {\n                sheet.getRows({\n                  offset: 1,\n                  limit: 50,\n                  //orderby: 'col2'\n                }, function (err, rows) {\n                  sheet.getCells({\n                    'min-row': 2, // starts in the second row\n                    'max-row': 50,\n                    'return-empty': true\n                  }, function (err, cells) {\n                    for(var a = 0; a < 50; a++) \n                      cells[a].value = \"\"\n                    sheet.bulkUpdateCells(cells) // async\n                    var i = 0\n                    var ok = false\n                    for(var j = 0; j < rowsSelected.length; j++){\n                      cells[i].value = rowsSelected[j].Line\n                      cells[i + 1].value = rowsSelected[j].Destination\n                      var minEstimateArrive = Math.round(rowsSelected[j].estimate_arrive / 60)\n                      if(minEstimateArrive == 0) minEstimateArrive = '< 1 min'\n                      else minEstimateArrive = minEstimateArrive +  ' min'\n                      cells[i + 2].value = minEstimateArrive\n                      cells[i + 3].value = (rowsSelected[j].distance_bus + ' m')\n                      i += 4 // NumColumns\n                    }\n                    sheet.bulkUpdateCells(cells) // async\n                    window.open(\"https://docs.google.com/spreadsheets/d/1r5hLRn1jwQbJLkW8Q3D2bIR9QK2tk3vBNvSy3xx2xxY/edit#gid=509695719\", \"_blank\")\n                    console.log(err)\n                  })\n                  console.log(err)\n                  step()\n                })\n              }\n            ], function (err) {\n              if (err) {\n                console.log('Error: ' + err)\n              }\n            })\n        },\n        handleClickSignIn () {\n          this.$gAuth.signIn()\n            .then(user => {\n              // On success do something, refer to https://developers.google.com/api-client-library/javascript/reference/referencedocs#googleusergetid\n              console.log('user', this.googleusergetid)\n              this.isSignIn = this.$gAuth.isAuthorized\n            })\n            .catch(error => {\n              console.log(error)\n              // On fail do something\n            })\n        },\n        handleClickSignOut () {\n          this.$gAuth.signOut()\n            .then(() => {\n              // On success do something\n              this.isSignIn = this.$gAuth.isAuthorized\n            })\n            .catch(error => {\n              console.log(error)\n              // On fail do something\n            })\n        }\n    },\n    mounted(){\n      this.initDB()\n      let that = this\n      let checkGauthLoad = setInterval(function () {\n      that.isInit = that.$gAuth.isInit\n      that.isSignIn = that.$gAuth.isAuthorized\n      if (that.isInit) clearInterval(checkGauthLoad)\n    }, 1000)\n    }\n}\n</script>\n<style>\n</style>\n"]}]}