{"remainingRequest":"C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\mdbvue\\src\\components\\Layout\\Masonry.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\mdbvue\\src\\components\\Layout\\Masonry.vue","mtime":499162500000},{"path":"C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Sergio\\Desktop\\vue-paper-dashboard-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\nconst Masonry = {\n  props: {\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    horizontal: {\n      type: Boolean,\n      default: false\n    },\n    responsive: {\n      type: Boolean,\n      default: false\n    },\n    flexbox: {\n      type: Boolean,\n      default: false\n    },\n    maxHeight: {\n      type: [String, Number],\n      default: 'auto'\n    },\n    numCols: {\n      type: Number\n    }\n  },\n\n  data() {\n    return {\n      height: null\n    };\n  },\n\n  computed: {\n    masonryClass() {\n      return [this.horizontal || this.flexbox ? this.flexbox ? 'masonry-with-flex' : 'masonry-horizontal' : 'masonry-with-columns'];\n    },\n\n    masonryStyle() {\n      return {\n        maxHeight: this.height ? isNaN(this.height) ? this.height : `${this.height}px` : null\n      };\n    }\n\n  },\n  methods: {\n    checkScreenSize() {\n      if (window.innerWidth < 600) {\n        this.height = null;\n      } else if (window.innerWidth < 1200) {\n        const dimentions = this.$slots.default.filter(el => el.tag).map(img => img.elm.clientWidth);\n        const center = Math.floor(dimentions.length / 2);\n        const firstCol = dimentions.slice(0, center).reduce((a, b) => a + b);\n        const secCol = dimentions.slice(center).reduce((a, b) => a + b);\n        this.height = firstCol > secCol ? firstCol : secCol;\n      } else {\n        this.height = this.maxHeight;\n      }\n    }\n\n  },\n\n  mounted() {\n    if (this.responsive) {\n      setTimeout(this.checkScreenSize, 200);\n      window.addEventListener(\"resize\", this.checkScreenSize);\n    } else {\n      this.height = this.maxHeight;\n    }\n\n    if (!this.horizontal && !this.flexbox) {\n      const colHeights = Array(this.numCols).fill(0);\n      const masonryWrapper = this.$refs.masonry;\n      Array.from(masonryWrapper.children).forEach((child, i) => {\n        const order = i % this.numCols;\n        child.style.order = order;\n        colHeights[order] += parseFloat(child.clientHeight);\n      });\n      masonryWrapper.style.height = Math.max(...colHeights) + 'px';\n    }\n  },\n\n  beforeDestroy() {\n    if (this.responsive) {\n      window.removeEventListener(\"resize\", this.checkScreenSize);\n    }\n  }\n\n};\nexport default Masonry;\nexport { Masonry as mdbMasonry };",{"version":3,"sources":["Masonry.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <component :is=\"tag\" :class=\"masonryClass\" :style=\"masonryStyle\" ref=\"masonry\">\n    <slot></slot>\n  </component>\n</template>\n\n<script>\nconst Masonry = {\n  props: {\n    tag: {\n      type: String,\n      default: 'div'\n    },\n    horizontal: {\n      type: Boolean,\n      default: false\n    },\n    responsive: {\n      type: Boolean,\n      default: false\n    },\n    flexbox: {\n      type: Boolean,\n      default: false\n    },\n    maxHeight: {\n      type: [String, Number],\n      default: 'auto'\n    },\n    numCols: {\n      type: Number\n    }\n  },\n  data() {\n    return {\n      height: null\n    };\n  },\n  computed: {\n    masonryClass() {\n      return [\n        this.horizontal || this.flexbox ? this.flexbox ? 'masonry-with-flex' : 'masonry-horizontal' : 'masonry-with-columns'\n      ];\n    },\n    masonryStyle() { \n      return {\n        maxHeight: this.height ? isNaN(this.height) ? this.height : `${this.height}px` : null\n      };\n    },\n  },\n  methods: {\n    checkScreenSize() {\n      if (window.innerWidth < 600) {\n        this.height = null;\n      }\n      else if (window.innerWidth < 1200) {\n        const dimentions = this.$slots.default.filter(el => el.tag).map(img => img.elm.clientWidth);\n        const center = Math.floor(dimentions.length/2);\n        const firstCol = dimentions.slice(0, center).reduce((a, b) => a + b);\n        const secCol = dimentions.slice(center).reduce((a, b) => a + b);\n\n        this.height = firstCol > secCol ? firstCol : secCol;\n      }\n      else {\n        this.height = this.maxHeight;\n      }\n    }\n  },\n  mounted() {\n    if (this.responsive) {\n      setTimeout(this.checkScreenSize, 200);\n      window.addEventListener(\"resize\", this.checkScreenSize);\n    } else {\n      this.height = this.maxHeight;\n    }\n    \n    if (!this.horizontal && !this.flexbox) {\n      const colHeights = Array(this.numCols).fill(0);\n      const masonryWrapper = this.$refs.masonry;\n      Array.from(masonryWrapper.children).forEach((child, i) => {\n        const order = i % this.numCols;\n        child.style.order = order;\n        colHeights[order] += parseFloat(child.clientHeight);\n      });\n      masonryWrapper.style.height = Math.max(...colHeights) + 'px';\n    }\n  },\n  beforeDestroy() {\n    if (this.responsive) {\n      window.removeEventListener(\"resize\", this.checkScreenSize);\n    }\n  }\n};\n\nexport default Masonry;\nexport { Masonry as mdbMasonry };\n</script>\n\n<style scoped>\n.masonry-with-columns, .masonry-with-flex {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -webkit-flex-direction: column;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap; }\n.masonry-horizontal {\n  display: flex;\n  flex-wrap: wrap; }\n.masonry-horizontal div {\n  flex: 1 0 auto; }\n</style>\n"],"sourceRoot":"node_modules/mdbvue/src/components/Layout"}]}